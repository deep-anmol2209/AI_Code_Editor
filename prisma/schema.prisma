// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  PREMIUM_USER
}
model User{
  id  String @id @default(cuid()) @map("_id")
  name String?
  email String @unique
  image String?
  myPlaygrounds Playground[]
  accounts Account[]
  staredPlayground StarMark[]
  chatMessages ChatMessage[]
  role UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
 id                String  @id @default(cuid()) @map("_id")
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String

  refreshToken      String? @map("refresh_token")
  accessToken       String? @map("access_token")
  expiresAt         Int?    @map("expires_at")
  tokenType         String? @map("token_type")
  scope             String?
  idToken           String? @map("id_token")
  sessionState      String? @map("session_state")
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@index([userId])
}

enum Templates {
 REACT
 NEXTJS
 EXPRESS
 VUE
 HONO
 ANGULAR
 GITHUB
}

model Playground {
  id String @id @default(cuid()) @map("_id")
  title String 
  description String?
  template Templates
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  repoUrl String?
  Starmark StarMark[]
  userId String
  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  templateFiles TemplateFile[]
}
model StarMark {
 id String @id @default(cuid()) @map("_id")
 userId String
 playgroundId String
 isMarked Boolean
 createdAt DateTime @default(now())
 user User  @relation(fields: [userId], references: [id] , onDelete: Cascade)
 playground Playground @relation(fields: [playgroundId], references: [id], onDelete: Cascade)

 @@unique([userId, playgroundId])
}

model TemplateFile {
   id String @id @default(cuid()) @map("_id")
   content Json
   createdDate DateTime  @default(now())
   updatedAt DateTime @updatedAt
   playgroundId String @unique
   playground Playground @relation(fields: [playgroundId], references: [id], onDelete: Cascade)
}

model ChatMessage {
  id String @id @default(cuid()) @map("_id")
  userId String
  role String 
  content String
  createdAt DateTime @default(now())
   
  user  User @relation(fields: [userId], references: [id], onDelete: Cascade)
}